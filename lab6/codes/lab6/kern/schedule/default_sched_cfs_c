#include <defs.h>
#include <list.h>
#include <proc.h>
#include <assert.h>
#include <default_sched.h>
#include <stdio.h>

#define USE_SKEW_HEAP 1

#define NICE_0_LOAD 1024
#define SCHEDULE_PERIOD 10

const int sched_prio_to_weight[40] = {
 /* -20 */     88761,     71755,     56483,     46273,     36291,
 /* -15 */     29154,     23254,     18705,     14949,     11916,
 /* -10 */      9548,      7620,      6100,      4904,      3906,
 /*  -5 */      3121,      2501,      1991,      1586,      1277,
 /*   0 */      1024,       820,       655,       526,       423,
 /*   5 */       335,       272,       215,       172,       137,
 /*  10 */       110,        87,        70,        56,        45,
 /*  15 */        36,        29,        23,        18,        15,
}; 


proc_stride_comp_f(void *a, void *b)
{
     struct proc_struct *p = le2proc(a, lab6_run_pool);
     struct proc_struct *q = le2proc(b, lab6_run_pool);
     int32_t c = p->lab6_stride - q->lab6_stride;
     if (c > 0) return 1;
     else if (c == 0) return 0;
     else return -1;
}

static void
CFS_init(struct run_queue *rq) {
    list_init(&(rq->run_list));
    rq->lab6_run_pool = NULL;
    rq->proc_num = 0;
    rq->total_weight = 0;
}

static void
CFS_enqueue(struct run_queue *rq, struct proc_struct *proc) {
    assert(list_empty(&(proc->run_link)));
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
    list_add_before(&(rq->run_list), &(proc->run_link));
    int proc_weight = sched_prio_to_weight[proc->lab6_priority];
    rq->total_weight += proc_weight;
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice * SCHEDULE_PERIOD) {
        proc->time_slice = rq->max_time_slice * SCHEDULE_PERIOD * proc_weight / rq->total_weight;
        if(proc->time_slice < 1)
            proc->time_slice = 1;
    }
    proc->rq = rq;
    rq->proc_num ++;
}

static void
CFS_dequeue(struct run_queue *rq, struct proc_struct *proc) {
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
    rq->lab6_run_pool =  skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
    list_del_init(&(proc->run_link));
    rq->proc_num --;
    rq->total_weight -= sched_prio_to_weight[proc->lab6_priority];
}

static struct proc_struct *
CFS_pick_next(struct run_queue *rq) {
    if(rq->lab6_run_pool == NULL)
        return NULL;
    struct proc_struct* proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
    uint32_t step = rq->max_time_slice * SCHEDULE_PERIOD * NICE_0_LOAD / rq->total_weight;
    if(step < 1)
        step = 1;
    proc->lab6_stride += step;
    return proc;
}

static void
CFS_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
    if (proc->time_slice > 0) {
        proc->time_slice --;
    }
    if (proc->time_slice == 0) {
        proc->need_resched = 1;
    }
}

struct sched_class default_sched_class = {
    .name = "CFS_scheduler",
    .init = CFS_init,
    .enqueue = CFS_enqueue,
    .dequeue = CFS_dequeue,
    .pick_next = CFS_pick_next,
    .proc_tick = CFS_proc_tick,
};

